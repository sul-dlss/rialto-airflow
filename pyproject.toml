[project]
name = "rialto-airflow"

version = "0.1.0"

description = "Airflow app for harvesting data for open access analysis and research intelligence."

authors = [ {name = "Laura Wrubel", email = "lwrubel@stanford.edu"}, {name = "Ed Summers", email = "edsu@stanford.edu"}, {name = "Jacob Hill", email = "jacob.hill@stanford.edu"}, {name = "Johnathan Martin", email = "john.martin@stanford.edu"}]

# Aligned with what is defined in Dockerfile and CI
requires-python = "== 3.12.*"

package-mode = false

dependencies = [
    "alembic>=1.16.5",
    "dimcli",
    "jsonpath-ng>=1.7.0",
    "honeybadger>=0.21",
    "more-itertools",
    "pandas>=2.2.3",
    "psycopg2-binary>=2.9.10",
    "pyalex",
    "python-dotenv",
    "requests",
    "requests_oauthlib",
    "sqlalchemy>=1.4.36,<2.0", # airflow still incompatible with 2.x, see https://github.com/apache/airflow/issues/28723
    "xmltodict>=0.14.2",
    "types-xmltodict>=0.14.0.20241009",
    "dominate>=2.9.1",
    "sqlalchemy-utils==0.41.2", # see: https://github.com/kvesteri/sqlalchemy-utils/issues/791
]

[tool.pytest.ini_options]
pythonpath = ["."]
addopts = "-v --cov --cov-report=html --cov-report=term --log-level INFO --log-file test.log"


[tool.coverage.run]
omit = ["test/*"]

[tool.mypy]
check_untyped_defs = true # Type-checks the interior of functions without type annotations.

[[tool.mypy.overrides]]
module = ["dimcli", "pyalex", "requests_oauthlib", "sqlalchemy_utils", "jsonpath_ng", "googleapiclient.http", "dominate", "dominate.tags"]
ignore_missing_imports = true

[dependency-groups]
dev = [
    "apache-airflow[google]==2.10.4", # aligned with base Docker image
    "mypy>=1.15.0",
    "pytest>=8.3.4",
    "pytest-alembic>=0.12.1",
    "pytest-cov>=6.0.0",
    "python-dotenv>=1.0.1",
    "requests-mock>=1.12.1",
    "ruff>=0.9.4",
    # packages with type info, for mypy
    "pandas-stubs",
    "sqlalchemy-stubs>=0.4", # when airflow allows SQLAlchemy >= 2.x, see if this is still needed/compatible
    "types-requests",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["rialto_airflow"]


[tool.alembic]

# path to migration scripts.
# this is typically a path given in POSIX (e.g. forward slashes)
# format, relative to the token %(here)s which refers to the location of this
# config file
script_location = "%(here)s/alembic"

# template used to generate migration file names; The default value is %%(rev)s_%%(slug)s
# Uncomment the line below if you want the files to be prepended with date and time
# see https://alembic.sqlalchemy.org/en/latest/tutorial.html#editing-the-ini-file
# for all available tokens
# file_template = "%%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s"

# additional paths to be prepended to sys.path. defaults to the current working directory.
prepend_sys_path = [
    "."
]

# timezone to use when rendering the date within the migration file
# as well as the filename.
# If specified, requires the python>=3.9 or backports.zoneinfo library and tzdata library.
# Any required deps can installed by adding `alembic[tz]` to the pip requirements
# string value is passed to ZoneInfo()
# leave blank for localtime
# timezone =

# max length of characters to apply to the "slug" field
# truncate_slug_length = 40

# set to 'true' to run the environment during
# the 'revision' command, regardless of autogenerate
# revision_environment = false

# set to 'true' to allow .pyc and .pyo files without
# a source .py file to be detected as revisions in the
# versions/ directory
# sourceless = false

# version location specification; This defaults
# to <script_location>/versions.  When using multiple version
# directories, initial revisions must be specified with --version-path.
version_locations = [
   "%(here)s/alembic/versions",
]


# set to 'true' to search source files recursively
# in each "version_locations" directory
# new in Alembic version 1.10
# recursive_version_locations = false

# the output encoding used when revision files
# are written from script.py.mako
# output_encoding = "utf-8"

# This section defines scripts or Python functions that are run
# on newly generated revision scripts.  See the documentation for further
# detail and examples
# [[tool.alembic.post_write_hooks]]
# format using "black" - use the console_scripts runner,
# against the "black" entrypoint
# name = "black"
# type = "console_scripts"
# entrypoint = "black"
# options = "-l 79 REVISION_SCRIPT_FILENAME"
#
# [[tool.alembic.post_write_hooks]]
# lint with attempts to fix using "ruff" - use the module runner, against the "ruff" module
# name = "ruff"
# type = "module"
# module = "ruff"
# options = "check --fix REVISION_SCRIPT_FILENAME"
#
# [[tool.alembic.post_write_hooks]]
# Alternatively, use the exec runner to execute a binary found on your PATH
# name = "ruff"
# type = "exec"
# executable = "ruff"
# options = "check --fix REVISION_SCRIPT_FILENAME"
